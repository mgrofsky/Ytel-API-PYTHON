# -*- coding: utf-8 -*-

"""
    message_360.controllers.post_card_controller

    This file was automatically generated for message360 by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class PostCardController(BaseController):

    """A Controller to access Endpoints in the message_360 API."""


    def view_postcard(self,
                      options=dict()):
        """Does a POST request to /Postcard/viewpostcard.{ResponseType}.

        Retrieve a postcard object by its PostcardId.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    postcardid -- string -- The unique identifier for a
                        postcard object.
                    response_type -- string -- Response Type either json or
                        xml

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(postcardid=options.get("postcardid"),
                                 response_type=options.get("response_type"))

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/Postcard/viewpostcard.{ResponseType}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'ResponseType': options.get('response_type', None)
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'postcardid': options.get('postcardid', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_postcard(self,
                        options=dict()):
        """Does a POST request to /Postcard/createpostcard.{ResponseType}.

        Create, print, and mail a postcard to an address. The postcard front
        must be supplied as a PDF, image, or an HTML string. The back can be a
        PDF, image, HTML string, or it can be automatically generated by
        supplying a custom message.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    to -- string -- The AddressId or an object structured when
                        creating an address by addresses/Create.
                    mfrom -- string -- The AddressId or an object structured
                        when creating an address by addresses/Create.
                    attachbyid -- string -- Set an existing postcard by
                        attaching its PostcardId.
                    front -- string -- A 4.25"x6.25" or 6.25"x11.25" image to
                        use as the front of the postcard.  This can be a URL,
                        local file, or an HTML string. Supported file types
                        are PDF, PNG, and JPEG.
                    back -- string -- A 4.25"x6.25" or 6.25"x11.25" image to
                        use as the back of the postcard, supplied as a URL,
                        local file, or HTML string.  This allows you to
                        customize your back design, but we will still insert
                        the recipient address for you.
                    message -- string -- The message for the back of the
                        postcard with a maximum of 350 characters.
                    setting -- string -- Code for the dimensions of the media
                        to be printed.
                    response_type -- string -- Response Type either json or
                        xml
                    description -- string -- A description for the postcard.
                    htmldata -- string -- A string value that contains HTML
                        markup.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(to=options.get("to"),
                                 mfrom=options.get("mfrom"),
                                 attachbyid=options.get("attachbyid"),
                                 front=options.get("front"),
                                 back=options.get("back"),
                                 message=options.get("message"),
                                 setting=options.get("setting"),
                                 response_type=options.get("response_type"))

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/Postcard/createpostcard.{ResponseType}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'ResponseType': options.get('response_type', None)
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'to': options.get('to', None),
            'from': options.get('mfrom', None),
            'attachbyid': options.get('attachbyid', None),
            'front': options.get('front', None),
            'back': options.get('back', None),
            'message': options.get('message', None),
            'setting': options.get('setting', None),
            'description': options.get('description', None),
            'htmldata': options.get('htmldata', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def list_postcards(self,
                       options=dict()):
        """Does a POST request to /Postcard/listpostcard.{ResponseType}.

        Retrieve a list of postcard objects. The postcards objects are sorted
        by creation date, with the most recently created postcards appearing
        first.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    response_type -- string -- Response Type either json or
                        xml
                    page -- int -- The page count to retrieve from the total
                        results in the collection. Page indexing starts at 1.
                    pagesize -- int -- The count of objects to return per
                        page.
                    postcardid -- string -- The unique identifier for a
                        postcard object.
                    date_created -- string -- The date the postcard was
                        created.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(response_type=options.get("response_type"))

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/Postcard/listpostcard.{ResponseType}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'ResponseType': options.get('response_type', None)
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': options.get('page', None),
            'pagesize': options.get('pagesize', None),
            'postcardid': options.get('postcardid', None),
            'dateCreated': options.get('date_created', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def delete_postcard(self,
                        options=dict()):
        """Does a POST request to /Postcard/deletepostcard.{ResponseType}.

        Remove a postcard object.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    postcardid -- string -- The unique identifier of a
                        postcard object.
                    response_type -- string -- Response Type either json or
                        xml

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(postcardid=options.get("postcardid"),
                                 response_type=options.get("response_type"))

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/Postcard/deletepostcard.{ResponseType}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'ResponseType': options.get('response_type', None)
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'postcardid': options.get('postcardid', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
