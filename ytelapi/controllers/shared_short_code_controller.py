# -*- coding: utf-8 -*-

"""
    ytelapi.controllers.shared_short_code_controller

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class SharedShortCodeController(BaseController):

    """A Controller to access Endpoints in the ytelapi API."""


    def create_shortcode_viewshortcode(self,
                                       shortcode):
        """Does a POST request to /shortcode/viewshortcode.json.

        The response returned here contains all resource properties associated
        with the given Shortcode.

        Args:
            shortcode (string): List of valid Shortcode to your Ytel account

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/viewshortcode.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Shortcode': shortcode
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_keyword_view(self,
                            keywordid):
        """Does a POST request to /keyword/view.json.

        View a set of properties for a single keyword.

        Args:
            keywordid (string): The unique identifier of each keyword

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/keyword/view.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Keywordid': keywordid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_shortcode_updateshortcode(self,
                                         options=dict()):
        """Does a POST request to /shortcode/updateshortcode.json.

        Update Assignment

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    shortcode -- string -- List of valid shortcode to your
                        Ytel account
                    friendly_name -- string -- User generated name of the
                        shortcode
                    callback_url -- string -- URL that can be requested to
                        receive notification when call has ended. A set of
                        default parameters will be sent here once the call is
                        finished.
                    callback_method -- string -- Specifies the HTTP method
                        used to request the required StatusCallBackUrl once
                        call connects.
                    fallback_url -- string -- URL used if any errors occur
                        during execution of InboundXML or at initial request
                        of the required Url provided with the POST.
                    fallback_url_method -- string -- Specifies the HTTP method
                        used to request the required FallbackUrl once call
                        connects.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/updateshortcode.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Shortcode': options.get('shortcode', None),
            'FriendlyName': options.get('friendly_name', None),
            'CallbackUrl': options.get('callback_url', None),
            'CallbackMethod': options.get('callback_method', None),
            'FallbackUrl': options.get('fallback_url', None),
            'FallbackUrlMethod': options.get('fallback_url_method', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_template_view(self,
                             template_id):
        """Does a POST request to /template/view.json.

        View a Shared ShortCode Template

        Args:
            template_id (uuid|string): The unique identifier for a template
                object

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/template/view.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'TemplateId': template_id
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_shortcode_listshortcode(self,
                                       options=dict()):
        """Does a POST request to /shortcode/listshortcode.json.

        Retrieve a list of shortcode assignment associated with your Ytel
        account.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    page -- int -- The page count to retrieve from the total
                        results in the collection. Page indexing starts at 1.
                    pagesize -- int -- Number of individual resources listed
                        in the response per page
                    shortcode -- string -- Only list keywords of shortcode

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/listshortcode.json'
        _query_parameters = {
            'Shortcode': options.get('shortcode', None)
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': options.get('page', None),
            'pagesize': options.get('pagesize', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_keyword_lists(self,
                             options=dict()):
        """Does a POST request to /keyword/lists.json.

        Retrieve a list of keywords associated with your Ytel account.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    page -- int -- The page count to retrieve from the total
                        results in the collection. Page indexing starts at 1.
                    pagesize -- int -- Number of individual resources listed
                        in the response per page
                    keyword -- string -- Only list keywords of keyword
                    shortcode -- int -- Only list keywords of shortcode

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/keyword/lists.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': options.get('page', None),
            'pagesize': options.get('pagesize', None),
            'Keyword': options.get('keyword', None),
            'Shortcode': options.get('shortcode', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_template_lists(self,
                              options=dict()):
        """Does a POST request to /template/lists.json.

        List Shortcode Templates by Type

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    mtype -- string -- The type (category) of template Valid
                        values: marketing, authorization
                    page -- int -- The page count to retrieve from the total
                        results in the collection. Page indexing starts at 1.
                    pagesize -- int -- The count of objects to return per
                        page.
                    shortcode -- string -- Only list templates of type

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/template/lists.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'type': options.get('mtype', None),
            'page': options.get('page', None),
            'pagesize': options.get('pagesize', None),
            'Shortcode': options.get('shortcode', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_shortcode_sendsms(self,
                                 options=dict()):
        """Does a POST request to /shortcode/sendsms.json.

        Send an SMS from a Ytel ShortCode

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    shortcode -- string -- The Short Code number that is the
                        sender of this message
                    to -- string -- A valid 10-digit number that should
                        receive the message
                    templateid -- uuid|string -- The unique identifier for the
                        template used for the message
                    data -- string -- format of your data, example:
                        {companyname}:test,{otpcode}:1234
                    method -- string -- Specifies the HTTP method used to
                        request the required URL once the Short Code message
                        is sent.
                    message_status_callback -- string -- URL that can be
                        requested to receive notification when Short Code
                        message was sent.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/sendsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'shortcode': options.get('shortcode', None),
            'to': options.get('to', None),
            'templateid': options.get('templateid', None),
            'data': options.get('data', None),
            'Method': options.get('method', None),
            'MessageStatusCallback': options.get('message_status_callback', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_shortcode_getinboundsms(self,
                                       options=dict()):
        """Does a POST request to /shortcode/getinboundsms.json.

        List All Inbound ShortCode

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    page -- int -- The page count to retrieve from the total
                        results in the collection. Page indexing starts at 1.
                    pagesize -- int -- Number of individual resources listed
                        in the response per page
                    mfrom -- string -- From Number to Inbound ShortCode
                    shortcode -- string -- Only list messages sent to this
                        Short Code
                    datecreated -- string -- Only list messages sent with the
                        specified date

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/getinboundsms.json'
        _query_parameters = {
            'Datecreated': options.get('datecreated', None)
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': options.get('page', None),
            'pagesize': options.get('pagesize', None),
            'from': options.get('mfrom', None),
            'Shortcode': options.get('shortcode', None)
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
